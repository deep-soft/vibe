# 2024-08-16 09:50
# act-release.yml
name: act-release

on:
  workflow_dispatch:
    inputs:
      SED_STUFF:
        description: SED_STUFF
        type: boolean
        default: false
        required: true
#  push:
#      tags:
#          - "v*"

env:
  TAG_NAME: "vibe"
  TAG_REF:  "0000000"
  EXE_FOLDER: "vibe/target/x86_64-pc-windows-msvc"

jobs:
    publish-tauri:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
#                    - platform: "macos-latest" # for Arm based macs (M1 and above).
#                      args: "--target aarch64-apple-darwin"
#                    - platform: "macos-latest" # for Intel based macs.
#                      args: "--target x86_64-apple-darwin"
                    - platform: "ubuntu-22.04" # Ubuntu 22.04 x86_64 (Works on 24.04 as well)
                      args: '--features "vulkan"'
                      pre-build-args: "--vulkan"
                    - platform: "windows-latest" # Windows x86_64
                      args: '--target x86_64-pc-windows-msvc --features "vulkan"'
                      pre-build-args: "--vulkan"

        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout
              uses: deep-soft/checkout@v4
#
            - name: set WORK_DIR_OS
              shell: bash
              run: |
                WORK_DIR_OS=$(pwd)
                echo WORK_DIR_OS=$WORK_DIR_OS
                echo WORK_DIR_OS=$WORK_DIR_OS >> $GITHUB_ENV
                echo GITHUB_WORKSPACE=$GITHUB_WORKSPACE

            - name: Extract Version
              if: ("${{ matrix.platform }}" == "windows-latest")
              continue-on-error: true
              shell: bash
              run: |
                _prog_version_=$(grep "\"version\":"  desktop/src-tauri/tauri.conf.json | awk -F : '{print $2}' | awk -F , '{print $1}' | tr -d '"' )  || true;
                #_revision_=$(git -C $1 rev-list --count HEAD)
                _ref_all_=$(git log -1 --format='%H')
                # _ref_=$(echo ${_ref_all_::7})
                _date_=$(date +%Y%m%d)
                _ref_org_=${{ env.TAG_REF }}
                _ref_len_="${#_ref_org_}"
                _ref_=$(echo ${_ref_all_::$_ref_len_})
                _revision_=$_ref_
                echo "TAG_REF=$_ref_" >> $GITHUB_ENV
                echo "TAG_VERSION=$_prog_version_" >> $GITHUB_ENV;
                echo "TAG_BUILD=$_revision_" >> $GITHUB_ENV;

            - name: Print Version
              shell: bash
              run: |
                echo "VER: ${{ env.TAG_VERSION }}"
                echo "REF: ${{ env.TAG_REF     }}"
                echo "BLD: ${{ env.TAG_BUILD   }}"
                echo "WORK_DIR_OS=${{ env.WORK_DIR_OS }}"
                echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
                echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > ${{ env.WORK_DIR_OS }}/_version_.txt

#
# sed-stuff begin
            - name: sed-stuff
              if: ${{ inputs.SED_STUFF }}
              continue-on-error: true
              shell: bash
              env:
                DEBUG_MODE_1: ${{ inputs.DEBUG_MODE_1 }}
                DEBUG_MODE_2: ${{ inputs.DEBUG_MODE_2 }}
              run: |
                bash bins/sed-stuff.sh "_" "${{ inputs.SED_STUFF_PARAMS }}"
# sed-stuff end

            - name: setup Bun
              uses: deep-soft/setup-bun@v1

            - name: Rust cache
              uses: deep-soft/rust-cache@v2

            - name: Install Rust stable
              uses: deep-soft/rust-toolchain@stable
              with:
                  # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: Install frontend dependencies
              run: bun install
              working-directory: ./desktop

            - name: Prepare Vulkan SDK for Ubuntu 22.04
              run: |
                wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
                sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.290-jammy.list https://packages.lunarg.com/vulkan/1.3.290/lunarg-vulkan-1.3.290-jammy.list
                sudo apt update
                sudo apt install vulkan-sdk -y
                sudo apt-get install -y mesa-vulkan-drivers
              if: ${{ contains(matrix.platform, 'ubuntu-22.04') && contains(matrix.args, 'vulkan') }}

            # Run pre build
            - name: Run pre_build.js on ${{ matrix.platform }}
              run: bun scripts/pre_build.js ${{ matrix.pre-build-args }}

            - name: Build
              continue-on-error: true
              uses: deep-soft/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  # TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                  # TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
              with:
                  tagName: v__VERSION__ # the action automatically replaces __VERSION__ with the app version.
                  releaseName: "v__VERSION__"
                  releaseBody: "What's new? ðŸŽ‰ðŸ“£"
                  prerelease: true
                  args: ${{ matrix.args }}
                  projectPath: "./desktop"
                  tauriScript: bunx tauri

# zip release begin
            - name: Prepare to Publish
              if: ${{ contains(matrix.platform, 'windows-latest') }}
              continue-on-error: true
              shell: bash
              run: |
                mkdir ./SignOutput/
                cp $(find -L $EXE_FOLDER/* -name "*.exe") ./SignOutput/ || true;
                ls -la ./SignOutput/ || true;

            - name: Create Archive 
              if: ${{ contains(matrix.platform, 'windows-latest') }}
              continue-on-error: true
              id: zip_archive
              uses: deep-soft/zip-release@v3
              with:
                type: '7z'
                filename: '${{ env.TAG_VERSION }}${{ env.TAG_BUILD }}-${{ matrix.platform }}'
                directory: './SignOutput'
                path: '*.exe'
                exclusions: '*.git* /*node_modules/* .editorconfig'
                volume_size: '2g'
                env_variable: 'ZIP_ARCHIVE'
                # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

            - name: Publish Archive ALL
              if: ${{ contains(matrix.platform, 'windows-latest') }}
              continue-on-error: true
              uses: deep-soft/action-gh-release@v2.1
              with:
                draft: true
                tag_name: v${{ env.TAG_VERSION }}${{ env.TAG_BUILD }}
                filelist: ${{ steps.zip_archive.outputs.volumes_list_name }}
                files: |
                    ${{ env.ZIP_ARCHIVE }}
                    ${{ env.WORK_DIR_OS }}/_version_.txt
# zip release end
